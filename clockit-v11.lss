
clockit-v11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000013  00800100  00800100  00000a42  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001fe  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000472  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000152  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000aac  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00001cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000216  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000020f  00000000  00000000  00001fc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 b3 04 	jmp	0x966	; 0x966 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 31       	cpi	r26, 0x13	; 19
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ac 04 	call	0x958	; 0x958 <main>
  88:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
uint8_t amMark = 0;
uint8_t amMark2 = 0;
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

ISR (SIG_OVERFLOW1) 
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	//Prescalar of 1024
	//Clock = 16MHz
	//15,625 clicks per second
	//64us per click	
    
    TCNT1 = 49911; //65536 - 15,625 = 49,911 - Preload timer 1 for 49,911 clicks. Should be 1s per ISR call
  9e:	87 ef       	ldi	r24, 0xF7	; 247
  a0:	92 ec       	ldi	r25, 0xC2	; 194
  a2:	90 93 85 00 	sts	0x0085, r25
  a6:	80 93 84 00 	sts	0x0084, r24

	//Debug with faster time!
    //TCNT1 = 63581; //65536 - 1,953 = 63581 - Preload timer 1 for 63581 clicks. Should be 0.125s per ISR call - 8 times faster than normal time
	
	flip_alarm = 1;
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	90 93 05 01 	sts	0x0105, r25
	
	if(flip == 0)
  b0:	80 91 0d 01 	lds	r24, 0x010D
  b4:	88 23       	and	r24, r24
  b6:	19 f4       	brne	.+6      	; 0xbe <__vector_13+0x2e>
		flip = 1;
  b8:	90 93 0d 01 	sts	0x010D, r25
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__vector_13+0x32>
	else
		flip = 0;
  be:	10 92 0d 01 	sts	0x010D, r1
		
	seconds++;
  c2:	80 91 0e 01 	lds	r24, 0x010E
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 0e 01 	sts	0x010E, r24
	if(seconds == 60)
  cc:	8c 33       	cpi	r24, 0x3C	; 60
  ce:	09 f5       	brne	.+66     	; 0x112 <__vector_13+0x82>
	{
		seconds = 0;
  d0:	10 92 0e 01 	sts	0x010E, r1
		minutes++;
  d4:	80 91 11 01 	lds	r24, 0x0111
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 11 01 	sts	0x0111, r24
		if(minutes == 60)
  de:	8c 33       	cpi	r24, 0x3C	; 60
  e0:	c1 f4       	brne	.+48     	; 0x112 <__vector_13+0x82>
		{
			minutes = 0;
  e2:	10 92 11 01 	sts	0x0111, r1
			hours++;
  e6:	80 91 12 01 	lds	r24, 0x0112
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 12 01 	sts	0x0112, r24

			if(hours == 12)
  f0:	8c 30       	cpi	r24, 0x0C	; 12
  f2:	51 f4       	brne	.+20     	; 0x108 <__vector_13+0x78>
			{
				if(ampm == AM)
  f4:	80 91 0f 01 	lds	r24, 0x010F
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	11 f4       	brne	.+4      	; 0x100 <__vector_13+0x70>
					ampm = PM;
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	01 c0       	rjmp	.+2      	; 0x102 <__vector_13+0x72>
				else
					ampm = AM;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 0f 01 	sts	0x010F, r24
 106:	05 c0       	rjmp	.+10     	; 0x112 <__vector_13+0x82>
			}

			if(hours == 13) hours = 1;
 108:	8d 30       	cpi	r24, 0x0D	; 13
 10a:	19 f4       	brne	.+6      	; 0x112 <__vector_13+0x82>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 12 01 	sts	0x0112, r24
		}
	}
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <check_alarm>:

//Check to see if the time is equal to the alarm time
void check_alarm(void)
{
	//Check wether the alarm slide switch is on or off
	if( (PINB & (1<<BUT_ALARM)) != 0)
 120:	18 9b       	sbis	0x03, 0	; 3
 122:	41 c0       	rjmp	.+130    	; 0x1a6 <check_alarm+0x86>
	{
		if (alarm_going == FALSE)
 124:	80 91 0c 01 	lds	r24, 0x010C
 128:	88 23       	and	r24, r24
 12a:	09 f0       	breq	.+2      	; 0x12e <check_alarm+0xe>
 12c:	41 c0       	rjmp	.+130    	; 0x1b0 <check_alarm+0x90>
		{
			//Check to see if the time equals the alarm time
			if( (hours == hours_alarm) && (minutes == minutes_alarm) && (seconds == seconds_alarm) && (ampm == ampm_alarm) && (snooze == FALSE) )
 12e:	20 91 12 01 	lds	r18, 0x0112
 132:	80 91 03 01 	lds	r24, 0x0103
 136:	28 17       	cp	r18, r24
 138:	c9 f4       	brne	.+50     	; 0x16c <check_alarm+0x4c>
 13a:	90 91 11 01 	lds	r25, 0x0111
 13e:	80 91 04 01 	lds	r24, 0x0104
 142:	98 17       	cp	r25, r24
 144:	99 f4       	brne	.+38     	; 0x16c <check_alarm+0x4c>
 146:	90 91 0e 01 	lds	r25, 0x010E
 14a:	80 91 09 01 	lds	r24, 0x0109
 14e:	98 17       	cp	r25, r24
 150:	69 f4       	brne	.+26     	; 0x16c <check_alarm+0x4c>
 152:	90 91 0f 01 	lds	r25, 0x010F
 156:	80 91 08 01 	lds	r24, 0x0108
 15a:	98 17       	cp	r25, r24
 15c:	39 f4       	brne	.+14     	; 0x16c <check_alarm+0x4c>
 15e:	80 91 0b 01 	lds	r24, 0x010B
 162:	88 23       	and	r24, r24
 164:	19 f4       	brne	.+6      	; 0x16c <check_alarm+0x4c>
			{
				//Set it off!
				alarm_going = TRUE;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 0c 01 	sts	0x010C, r24
			}

			//Check to see if we need to set off the alarm again after a ~9 minute snooze
			if( (hours == hours_alarm_snooze) && (minutes == minutes_alarm_snooze) && (seconds == seconds_alarm_snooze) && (ampm == ampm_alarm_snooze) && (snooze == TRUE) )
 16c:	80 91 07 01 	lds	r24, 0x0107
 170:	28 17       	cp	r18, r24
 172:	f1 f4       	brne	.+60     	; 0x1b0 <check_alarm+0x90>
 174:	90 91 11 01 	lds	r25, 0x0111
 178:	80 91 06 01 	lds	r24, 0x0106
 17c:	98 17       	cp	r25, r24
 17e:	c1 f4       	brne	.+48     	; 0x1b0 <check_alarm+0x90>
 180:	90 91 0e 01 	lds	r25, 0x010E
 184:	80 91 10 01 	lds	r24, 0x0110
 188:	98 17       	cp	r25, r24
 18a:	91 f4       	brne	.+36     	; 0x1b0 <check_alarm+0x90>
 18c:	90 91 0f 01 	lds	r25, 0x010F
 190:	80 91 0a 01 	lds	r24, 0x010A
 194:	98 17       	cp	r25, r24
 196:	61 f4       	brne	.+24     	; 0x1b0 <check_alarm+0x90>
 198:	80 91 0b 01 	lds	r24, 0x010B
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	41 f4       	brne	.+16     	; 0x1b0 <check_alarm+0x90>
			{
				//Set it off!
				alarm_going = TRUE;
 1a0:	80 93 0c 01 	sts	0x010C, r24
 1a4:	08 95       	ret
			}
		}
	}
	else
	{
		alarm_going = FALSE;
 1a6:	10 92 0c 01 	sts	0x010C, r1
		shredCount = 0;
 1aa:	10 92 00 01 	sts	0x0100, r1
		cbi(PORTB, SHRED);
 1ae:	2a 98       	cbi	0x05, 2	; 5
 1b0:	08 95       	ret

000001b2 <clear_display>:

}

void clear_display(void)
{
	PORTC = 0;
 1b2:	18 b8       	out	0x08, r1	; 8
	PORTD &= 0b10000000;
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	80 78       	andi	r24, 0x80	; 128
 1b8:	8b b9       	out	0x0b, r24	; 11
}
 1ba:	08 95       	ret

000001bc <display_number>:

void display_number(uint8_t number, uint8_t digit)
{
 1bc:	98 2f       	mov	r25, r24
	//Set the digit
	PORTD &= 0b10100100;
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	84 7a       	andi	r24, 0xA4	; 164
 1c2:	8b b9       	out	0x0b, r24	; 11
	cbi(PORTB, 3);
 1c4:	2b 98       	cbi	0x05, 3	; 5
	
	switch(digit)
 1c6:	63 30       	cpi	r22, 0x03	; 3
 1c8:	91 f0       	breq	.+36     	; 0x1ee <display_number+0x32>
 1ca:	64 30       	cpi	r22, 0x04	; 4
 1cc:	28 f4       	brcc	.+10     	; 0x1d8 <display_number+0x1c>
 1ce:	61 30       	cpi	r22, 0x01	; 1
 1d0:	51 f0       	breq	.+20     	; 0x1e6 <display_number+0x2a>
 1d2:	62 30       	cpi	r22, 0x02	; 2
 1d4:	99 f4       	brne	.+38     	; 0x1fc <display_number+0x40>
 1d6:	09 c0       	rjmp	.+18     	; 0x1ea <display_number+0x2e>
 1d8:	65 30       	cpi	r22, 0x05	; 5
 1da:	69 f0       	breq	.+26     	; 0x1f6 <display_number+0x3a>
 1dc:	65 30       	cpi	r22, 0x05	; 5
 1de:	48 f0       	brcs	.+18     	; 0x1f2 <display_number+0x36>
 1e0:	66 30       	cpi	r22, 0x06	; 6
 1e2:	61 f4       	brne	.+24     	; 0x1fc <display_number+0x40>
 1e4:	0a c0       	rjmp	.+20     	; 0x1fa <display_number+0x3e>
	{
		case 1:
			PORTD |= (1<<DIG_1);//Select Digit 1
 1e6:	58 9a       	sbi	0x0b, 0	; 11
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <display_number+0x40>
			break;
		case 2:
			PORTD |= (1<<DIG_2);//Select Digit 2
 1ea:	59 9a       	sbi	0x0b, 1	; 11
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <display_number+0x40>
			break;
		case 3:
			PORTD |= (1<<DIG_3);//Select Digit 3
 1ee:	5c 9a       	sbi	0x0b, 4	; 11
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <display_number+0x40>
			break;
		case 4:
			PORTD |= (1<<DIG_4);//Select Digit 4
 1f2:	5e 9a       	sbi	0x0b, 6	; 11
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <display_number+0x40>
			break;
		case 5:
			PORTD |= (1<<COL);//Select Digit COL
 1f6:	5b 9a       	sbi	0x0b, 3	; 11
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <display_number+0x40>
			break;
		case 6:
			PORTB |= (1<<3);	// Select Apostrophe
 1fa:	2b 9a       	sbi	0x05, 3	; 5
		default: 
			break;
	}
	
	PORTC = 0x3F; //Clear all segments
 1fc:	8f e3       	ldi	r24, 0x3F	; 63
 1fe:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1<<2)|(1<<5); //Clear D segment and decimal point
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	84 62       	ori	r24, 0x24	; 36
 204:	8b b9       	out	0x0b, r24	; 11
	
	switch(number)
 206:	96 30       	cpi	r25, 0x06	; 6
 208:	a1 f1       	breq	.+104    	; 0x272 <display_number+0xb6>
 20a:	97 30       	cpi	r25, 0x07	; 7
 20c:	78 f4       	brcc	.+30     	; 0x22c <display_number+0x70>
 20e:	92 30       	cpi	r25, 0x02	; 2
 210:	21 f1       	breq	.+72     	; 0x25a <display_number+0x9e>
 212:	93 30       	cpi	r25, 0x03	; 3
 214:	30 f4       	brcc	.+12     	; 0x222 <display_number+0x66>
 216:	99 23       	and	r25, r25
 218:	c9 f0       	breq	.+50     	; 0x24c <display_number+0x90>
 21a:	91 30       	cpi	r25, 0x01	; 1
 21c:	09 f0       	breq	.+2      	; 0x220 <display_number+0x64>
 21e:	40 c0       	rjmp	.+128    	; 0x2a0 <display_number+0xe4>
 220:	18 c0       	rjmp	.+48     	; 0x252 <display_number+0x96>
 222:	94 30       	cpi	r25, 0x04	; 4
 224:	01 f1       	breq	.+64     	; 0x266 <display_number+0xaa>
 226:	95 30       	cpi	r25, 0x05	; 5
 228:	08 f5       	brcc	.+66     	; 0x26c <display_number+0xb0>
 22a:	1a c0       	rjmp	.+52     	; 0x260 <display_number+0xa4>
 22c:	99 30       	cpi	r25, 0x09	; 9
 22e:	59 f1       	breq	.+86     	; 0x286 <display_number+0xca>
 230:	9a 30       	cpi	r25, 0x0A	; 10
 232:	28 f4       	brcc	.+10     	; 0x23e <display_number+0x82>
 234:	97 30       	cpi	r25, 0x07	; 7
 236:	01 f1       	breq	.+64     	; 0x278 <display_number+0xbc>
 238:	98 30       	cpi	r25, 0x08	; 8
 23a:	91 f5       	brne	.+100    	; 0x2a0 <display_number+0xe4>
 23c:	21 c0       	rjmp	.+66     	; 0x280 <display_number+0xc4>
 23e:	9b 30       	cpi	r25, 0x0B	; 11
 240:	59 f1       	breq	.+86     	; 0x298 <display_number+0xdc>
 242:	9b 30       	cpi	r25, 0x0B	; 11
 244:	28 f1       	brcs	.+74     	; 0x290 <display_number+0xd4>
 246:	9c 30       	cpi	r25, 0x0C	; 12
 248:	59 f5       	brne	.+86     	; 0x2a0 <display_number+0xe4>
 24a:	28 c0       	rjmp	.+80     	; 0x29c <display_number+0xe0>
	{
		case 0:
			PORTC &= 0b11010000; //Segments A, B, C, D, E, F
 24c:	88 b1       	in	r24, 0x08	; 8
 24e:	80 7d       	andi	r24, 0xD0	; 208
 250:	1c c0       	rjmp	.+56     	; 0x28a <display_number+0xce>
			PORTD &= 0b11111011;
			break;
		case 1:
			PORTC &= 0b11011011; //Segments B, C
 252:	88 b1       	in	r24, 0x08	; 8
 254:	8b 7d       	andi	r24, 0xDB	; 219
 256:	88 b9       	out	0x08, r24	; 8
 258:	08 95       	ret
			//PORTD |= 0b00000000;
			break;
		case 2:
			PORTC &= 0b11000110; //Segments A, B, D, E, G
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	86 7c       	andi	r24, 0xC6	; 198
 25e:	15 c0       	rjmp	.+42     	; 0x28a <display_number+0xce>
			PORTD &= 0b11111011;
			break;
		case 3:
			PORTC &= 0b11000011; //Segments ABCDG
 260:	88 b1       	in	r24, 0x08	; 8
 262:	83 7c       	andi	r24, 0xC3	; 195
 264:	12 c0       	rjmp	.+36     	; 0x28a <display_number+0xce>
			PORTD &= 0b11111011;
			break;
		case 4:
			PORTC &= 0b11001001; //Segments BCGF
 266:	88 b1       	in	r24, 0x08	; 8
 268:	89 7c       	andi	r24, 0xC9	; 201
 26a:	08 c0       	rjmp	.+16     	; 0x27c <display_number+0xc0>
			PORTD &= 0b11111111;
			break;
		case 5:
			PORTC &= 0b11100001; //Segments AFGCD
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	81 7e       	andi	r24, 0xE1	; 225
 270:	0c c0       	rjmp	.+24     	; 0x28a <display_number+0xce>
			PORTD &= 0b11111011;
			break;
		case 6:
			PORTC &= 0b11100000; //Segments AFGDCE
 272:	88 b1       	in	r24, 0x08	; 8
 274:	80 7e       	andi	r24, 0xE0	; 224
 276:	09 c0       	rjmp	.+18     	; 0x28a <display_number+0xce>
			PORTD &= 0b11111011;
			break;
		case 7:
			PORTC &= 0b11010011; //Segments ABC
 278:	88 b1       	in	r24, 0x08	; 8
 27a:	83 7d       	andi	r24, 0xD3	; 211
 27c:	88 b9       	out	0x08, r24	; 8
 27e:	09 c0       	rjmp	.+18     	; 0x292 <display_number+0xd6>
			PORTD &= 0b11111111;
			break;
		case 8:
			PORTC &= 0b11000000; //Segments ABCDEFG
 280:	88 b1       	in	r24, 0x08	; 8
 282:	80 7c       	andi	r24, 0xC0	; 192
 284:	02 c0       	rjmp	.+4      	; 0x28a <display_number+0xce>
			PORTD &= 0b11111011;
			break;
		case 9:
			PORTC &= 0b11000001; //Segments ABCDFG
 286:	88 b1       	in	r24, 0x08	; 8
 288:	81 7c       	andi	r24, 0xC1	; 193
 28a:	88 b9       	out	0x08, r24	; 8
			PORTD &= 0b11111011;
 28c:	5a 98       	cbi	0x0b, 2	; 11
 28e:	08 95       	ret
			break;

		case 10:
			//Colon
			PORTC &= 0b11111011;
 290:	42 98       	cbi	0x08, 2	; 8
			PORTD &= 0b11111111;
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	8b b9       	out	0x0b, r24	; 11
 296:	08 95       	ret
			break;

		case 11:
			//Alarm dot
			PORTD &= 0b11011111;
 298:	5d 98       	cbi	0x0b, 5	; 11
 29a:	08 95       	ret
			break;

		case 12:
			//AM dot
			PORTC &= 0b11111011; //Segments C
 29c:	42 98       	cbi	0x08, 2	; 8
 29e:	08 95       	ret
			break;

		default: 
			PORTC = 0;
 2a0:	18 b8       	out	0x08, r1	; 8
 2a2:	08 95       	ret

000002a4 <ioinit>:
}

void ioinit(void)
{
    //1 = output, 0 = input 
    DDRB = 0b11111111 & ~((1<<BUT_UP)|(1<<BUT_DOWN)|(1<<BUT_ALARM)); //Up, Down, Alarm switch  
 2a4:	8e ec       	ldi	r24, 0xCE	; 206
 2a6:	84 b9       	out	0x04, r24	; 4
    DDRC = 0b11111111;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11111111 & ~(1<<BUT_SNOOZE); //Snooze button
 2ac:	8f e7       	ldi	r24, 0x7F	; 127
 2ae:	8a b9       	out	0x0a, r24	; 10
	

	PORTB = (1<<BUT_UP)|(1<<BUT_DOWN)|(1<<BUT_ALARM); //Enable pull-ups on these pins
 2b0:	81 e3       	ldi	r24, 0x31	; 49
 2b2:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b10100100; //Enable pull-up on snooze button
 2b4:	84 ea       	ldi	r24, 0xA4	; 164
 2b6:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b00111111;
 2b8:	8f e3       	ldi	r24, 0x3F	; 63
 2ba:	88 b9       	out	0x08, r24	; 8

    //Init Timer0 for delay_us
	TCCR0B = (1<<CS01); //Set Prescaler to clk/8 : 1click = 0.5us(assume we are running at external 16MHz). CS01=1 
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	85 bd       	out	0x25, r24	; 37
	
	//Init Timer1 for second counting
	TCCR1B = (1<<CS12)|(1<<CS10); //Set prescaler to clk/1024 :1click = 64us (assume we are running at 16MHz)
 2c0:	85 e0       	ldi	r24, 0x05	; 5
 2c2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1); //Enable overflow interrupts
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	20 93 6f 00 	sts	0x006F, r18
    TCNT1 = 49911; //65536 - 15,625 = 49,911 - Preload timer 1 for 49,911 clicks. Should be 1s per ISR call
 2cc:	87 ef       	ldi	r24, 0xF7	; 247
 2ce:	92 ec       	ldi	r25, 0xC2	; 194
 2d0:	90 93 85 00 	sts	0x0085, r25
 2d4:	80 93 84 00 	sts	0x0084, r24
	
	//Init Timer2 for updating the display via interrupts
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); //Set prescalar to clk/1024 : 1 click = 64us (assume 16MHz)
 2d8:	87 e0       	ldi	r24, 0x07	; 7
 2da:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = (1<<TOIE2);
 2de:	20 93 70 00 	sts	0x0070, r18
	
	hours = 88;
	minutes = 88;
	seconds = 88;

	alarm_going = FALSE;
 2e2:	10 92 0c 01 	sts	0x010C, r1
	
	sei(); //Enable interrupts
 2e6:	78 94       	sei

	//siren(200); //Make some noise at power up
	
	hours = 6;
 2e8:	86 e0       	ldi	r24, 0x06	; 6
 2ea:	80 93 12 01 	sts	0x0112, r24
	minutes = 59;
 2ee:	8b e3       	ldi	r24, 0x3B	; 59
 2f0:	80 93 11 01 	sts	0x0111, r24
	seconds = 55;
 2f4:	87 e3       	ldi	r24, 0x37	; 55
 2f6:	80 93 0e 01 	sts	0x010E, r24
	ampm = AM;
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	90 93 0f 01 	sts	0x010F, r25

	hours_alarm = 7;
 300:	87 e0       	ldi	r24, 0x07	; 7
 302:	80 93 03 01 	sts	0x0103, r24
	minutes_alarm = 00;
 306:	10 92 04 01 	sts	0x0104, r1
	seconds_alarm = 00;
 30a:	10 92 09 01 	sts	0x0109, r1
	ampm_alarm = AM;
 30e:	90 93 08 01 	sts	0x0108, r25

	hours_alarm_snooze = 7;
 312:	80 93 07 01 	sts	0x0107, r24
	minutes_alarm_snooze = 05;
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	80 93 06 01 	sts	0x0106, r24
	seconds_alarm_snooze = 00;
 31c:	10 92 10 01 	sts	0x0110, r1
	ampm_alarm_snooze = AM;
 320:	90 93 0a 01 	sts	0x010A, r25
	
	snooze = FALSE;
 324:	10 92 0b 01 	sts	0x010B, r1

		PORTD = 0xFF;
		PORTC = 0xFF;
		delay_ms(1000);
	}*/	
}
 328:	08 95       	ret

0000032a <delay_us>:
}

//General short delays
void delay_us(uint16_t x)
{
	x *= 2; //Correction for 16MHz
 32a:	9c 01       	movw	r18, r24
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
	
	while(x > 256)
	{
		TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer2
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	06 c0       	rjmp	.+12     	; 0x340 <delay_us+0x16>
 334:	85 bb       	out	0x15, r24	; 21
		TCNT0 = 0; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
 336:	16 bc       	out	0x26, r1	; 38
		while( (TIFR0 & (1<<TOV0)) == 0);
 338:	a8 9b       	sbis	0x15, 0	; 21
 33a:	fe cf       	rjmp	.-4      	; 0x338 <delay_us+0xe>
		
		x -= 256;
 33c:	20 50       	subi	r18, 0x00	; 0
 33e:	31 40       	sbci	r19, 0x01	; 1
//General short delays
void delay_us(uint16_t x)
{
	x *= 2; //Correction for 16MHz
	
	while(x > 256)
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	21 30       	cpi	r18, 0x01	; 1
 344:	39 07       	cpc	r19, r25
 346:	b0 f7       	brcc	.-20     	; 0x334 <delay_us+0xa>
		while( (TIFR0 & (1<<TOV0)) == 0);
		
		x -= 256;
	}

	TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer2
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 256 - x; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
 34c:	82 2f       	mov	r24, r18
 34e:	81 95       	neg	r24
 350:	86 bd       	out	0x26, r24	; 38
	while( (TIFR0 & (1<<TOV0)) == 0);
 352:	a8 9b       	sbis	0x15, 0	; 21
 354:	fe cf       	rjmp	.-4      	; 0x352 <delay_us+0x28>
}
 356:	08 95       	ret

00000358 <delay_ms>:
	}*/	
}

//General short delays
void delay_ms(uint16_t x)
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ec 01       	movw	r28, r24
 35e:	11 c0       	rjmp	.+34     	; 0x382 <delay_ms+0x2a>
	for (; x > 0 ; x--)
	{
		delay_us(250);
 360:	8a ef       	ldi	r24, 0xFA	; 250
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
		delay_us(250);
 368:	8a ef       	ldi	r24, 0xFA	; 250
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
		delay_us(250);
 370:	8a ef       	ldi	r24, 0xFA	; 250
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
		delay_us(250);
 378:	8a ef       	ldi	r24, 0xFA	; 250
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for (; x > 0 ; x--)
 380:	21 97       	sbiw	r28, 0x01	; 1
 382:	20 97       	sbiw	r28, 0x00	; 0
 384:	69 f7       	brne	.-38     	; 0x360 <delay_ms+0x8>
		delay_us(250);
		delay_us(250);
		delay_us(250);
		delay_us(250);
	}
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <siren>:
}


//Make noise for time_on in (ms)
void siren(int duration)
{
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	8c 01       	movw	r16, r24
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	0b c0       	rjmp	.+22     	; 0x3b2 <siren+0x26>

	for(int i = 0 ; i < duration ; i++)
	{
		cbi(PORTB, BUZZ1);
 39c:	29 98       	cbi	0x05, 1	; 5
//		sbi(PORTB, BUZZ2);
		delay_us(300);
 39e:	8c e2       	ldi	r24, 0x2C	; 44
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

		sbi(PORTB, BUZZ1);
 3a6:	29 9a       	sbi	0x05, 1	; 5
//		cbi(PORTB, BUZZ2);
		delay_us(300);
 3a8:	8c e2       	ldi	r24, 0x2C	; 44
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

//Make noise for time_on in (ms)
void siren(int duration)
{

	for(int i = 0 ; i < duration ; i++)
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	c0 17       	cp	r28, r16
 3b4:	d1 07       	cpc	r29, r17
 3b6:	94 f3       	brlt	.-28     	; 0x39c <siren+0x10>
		sbi(PORTB, BUZZ1);
//		cbi(PORTB, BUZZ2);
		delay_us(300);
	}

	cbi(PORTB, BUZZ1);
 3b8:	29 98       	cbi	0x05, 1	; 5
//	cbi(PORTB, BUZZ2);

	delay_ms(50);
 3ba:	82 e3       	ldi	r24, 0x32	; 50
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 ac 01 	call	0x358	; 0x358 <delay_ms>
 3c2:	c0 e0       	ldi	r28, 0x00	; 0
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
 3c6:	0b c0       	rjmp	.+22     	; 0x3de <siren+0x52>
	
	for(int i = 0 ; i < duration ; i++)
	{
		cbi(PORTB, BUZZ1);
 3c8:	29 98       	cbi	0x05, 1	; 5
//		sbi(PORTB, BUZZ2);
		delay_us(300);
 3ca:	8c e2       	ldi	r24, 0x2C	; 44
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

		sbi(PORTB, BUZZ1);
 3d2:	29 9a       	sbi	0x05, 1	; 5
//		cbi(PORTB, BUZZ2);
		delay_us(300);
 3d4:	8c e2       	ldi	r24, 0x2C	; 44
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
	cbi(PORTB, BUZZ1);
//	cbi(PORTB, BUZZ2);

	delay_ms(50);
	
	for(int i = 0 ; i < duration ; i++)
 3dc:	21 96       	adiw	r28, 0x01	; 1
 3de:	c0 17       	cp	r28, r16
 3e0:	d1 07       	cpc	r29, r17
 3e2:	94 f3       	brlt	.-28     	; 0x3c8 <siren+0x3c>
		sbi(PORTB, BUZZ1);
//		cbi(PORTB, BUZZ2);
		delay_us(300);
	}

	cbi(PORTB, BUZZ1);
 3e4:	29 98       	cbi	0x05, 1	; 5
//	cbi(PORTB, BUZZ2);
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	08 95       	ret

000003f0 <display_alarm_time>:
//Brightness level is an amount of time the LEDs will be in - 200us is pretty dim but visible.
//Amount of time during display is around : [ BRIGHT_LEVEL(us) * 5 + 10ms ] * 10
//Roughly 11ms * 10 = 110ms
//Time on is in (ms)
void display_alarm_time(uint16_t time_on)
{
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	8c 01       	movw	r16, r24
 3fa:	c0 e0       	ldi	r28, 0x00	; 0
 3fc:	d0 e0       	ldi	r29, 0x00	; 0
 3fe:	60 c0       	rjmp	.+192    	; 0x4c0 <display_alarm_time+0xd0>
	
	//time_on /= 11; //Take the time_on and adjust it for the time it takes to run the display loop below

	for(uint16_t j = 0 ; j < time_on ; j++)
	{
		amMark2++;
 400:	80 91 02 01 	lds	r24, 0x0102
 404:	8f 5f       	subi	r24, 0xFF	; 255
 406:	80 93 02 01 	sts	0x0102, r24
		//Display normal hh:mm time
		if(hours_alarm > 9)
 40a:	80 91 03 01 	lds	r24, 0x0103
 40e:	8a 30       	cpi	r24, 0x0A	; 10
 410:	50 f0       	brcs	.+20     	; 0x426 <display_alarm_time+0x36>
		{
			display_number(hours_alarm / 10, 1); //Post to digit 1
 412:	6a e0       	ldi	r22, 0x0A	; 10
 414:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodqi4>
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
			delay_us(bright_level);
 41e:	82 e3       	ldi	r24, 0x32	; 50
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
		}

		display_number(hours_alarm % 10, 2); //Post to digit 2
 426:	80 91 03 01 	lds	r24, 0x0103
 42a:	6a e0       	ldi	r22, 0x0A	; 10
 42c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodqi4>
 430:	89 2f       	mov	r24, r25
 432:	62 e0       	ldi	r22, 0x02	; 2
 434:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
		delay_us(bright_level);
 438:	82 e3       	ldi	r24, 0x32	; 50
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

		display_number(minutes_alarm / 10, 3); //Post to digit 3
 440:	80 91 04 01 	lds	r24, 0x0104
 444:	6a e0       	ldi	r22, 0x0A	; 10
 446:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodqi4>
 44a:	63 e0       	ldi	r22, 0x03	; 3
 44c:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
		delay_us(bright_level);
 450:	82 e3       	ldi	r24, 0x32	; 50
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

		display_number(minutes_alarm % 10, 4); //Post to digit 4
 458:	80 91 04 01 	lds	r24, 0x0104
 45c:	6a e0       	ldi	r22, 0x0A	; 10
 45e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodqi4>
 462:	89 2f       	mov	r24, r25
 464:	64 e0       	ldi	r22, 0x04	; 4
 466:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
		delay_us(bright_level);
 46a:	82 e3       	ldi	r24, 0x32	; 50
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

		display_number(10, 5); //Display colon
		delay_us(bright_level);*/
		
		//Flash colon for each second
		if(flip == 1) 
 472:	80 91 0d 01 	lds	r24, 0x010D
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	41 f4       	brne	.+16     	; 0x48a <display_alarm_time+0x9a>
		{
			display_number(10, 5); //Post to digit COL
 47a:	8a e0       	ldi	r24, 0x0A	; 10
 47c:	65 e0       	ldi	r22, 0x05	; 5
 47e:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
			delay_us(bright_level);
 482:	82 e3       	ldi	r24, 0x32	; 50
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
		}
		
		//Check whether it is AM or PM and turn on dot
		if((ampm_alarm == AM)&&(amMark2 >= 10))
 48a:	80 91 08 01 	lds	r24, 0x0108
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	71 f4       	brne	.+28     	; 0x4ae <display_alarm_time+0xbe>
 492:	80 91 02 01 	lds	r24, 0x0102
 496:	8a 30       	cpi	r24, 0x0A	; 10
 498:	50 f0       	brcs	.+20     	; 0x4ae <display_alarm_time+0xbe>
		{	
			amMark2 = 0;
 49a:	10 92 02 01 	sts	0x0102, r1
			display_number(12, 6); //Turn on dot on apostrophe
 49e:	8c e0       	ldi	r24, 0x0C	; 12
 4a0:	66 e0       	ldi	r22, 0x06	; 6
 4a2:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
			delay_us(bright_level);
 4a6:	82 e3       	ldi	r24, 0x32	; 50
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

}

void clear_display(void)
{
	PORTC = 0;
 4ae:	18 b8       	out	0x08, r1	; 8
	PORTD &= 0b10000000;
 4b0:	8b b1       	in	r24, 0x0b	; 11
 4b2:	80 78       	andi	r24, 0x80	; 128
 4b4:	8b b9       	out	0x0b, r24	; 11
			display_number(12, 6); //Turn on dot on apostrophe
			delay_us(bright_level);
		}

		clear_display();
		delay_ms(1);
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 ac 01 	call	0x358	; 0x358 <delay_ms>
{
	uint16_t bright_level = 50;
	
	//time_on /= 11; //Take the time_on and adjust it for the time it takes to run the display loop below

	for(uint16_t j = 0 ; j < time_on ; j++)
 4be:	21 96       	adiw	r28, 0x01	; 1
 4c0:	c0 17       	cp	r28, r16
 4c2:	d1 07       	cpc	r29, r17
 4c4:	08 f4       	brcc	.+2      	; 0x4c8 <display_alarm_time+0xd8>
 4c6:	9c cf       	rjmp	.-200    	; 0x400 <display_alarm_time+0x10>

		clear_display();
		delay_ms(1);
	}
	
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	08 95       	ret

000004d2 <display_time>:
//Brightness level is an amount of time the LEDs will be in - 200us is pretty dim but visible.
//Amount of time during display is around : [ BRIGHT_LEVEL(us) * 5 + 10ms ] * 10
//Roughly 11ms * 10 = 110ms
//Time on is in (ms)
void display_time(uint16_t time_on)
{
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	7c 01       	movw	r14, r24
 4de:	c0 e0       	ldi	r28, 0x00	; 0
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else
		{
			snooze = FALSE; //If the alarm switch is turned off, this resets the ~9 minute addtional snooze timer
			
			hours_alarm_snooze = 88; //Set these values high, so that normal time cannot hit the snooze time accidentally
 4e2:	18 e5       	ldi	r17, 0x58	; 88
 4e4:	96 c0       	rjmp	.+300    	; 0x612 <__stack+0x113>
	
	//time_on /= 11; //Take the time_on and adjust it for the time it takes to run the display loop below
	
	for(uint16_t j = 0 ; j < time_on ; j++)
	{
		amMark++;
 4e6:	80 91 01 01 	lds	r24, 0x0101
 4ea:	8f 5f       	subi	r24, 0xFF	; 255
 4ec:	80 93 01 01 	sts	0x0101, r24

#ifdef NORMAL_TIME
		//Display normal hh:mm time
		if(hours > 9)
 4f0:	80 91 12 01 	lds	r24, 0x0112
 4f4:	8a 30       	cpi	r24, 0x0A	; 10
 4f6:	50 f0       	brcs	.+20     	; 0x50c <__stack+0xd>
		{
			display_number(hours / 10, 1); //Post to digit 1
 4f8:	6a e0       	ldi	r22, 0x0A	; 10
 4fa:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodqi4>
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
			delay_us(bright_level);
 504:	82 e3       	ldi	r24, 0x32	; 50
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
		}

		display_number(hours % 10, 2); //Post to digit 2
 50c:	80 91 12 01 	lds	r24, 0x0112
 510:	6a e0       	ldi	r22, 0x0A	; 10
 512:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodqi4>
 516:	89 2f       	mov	r24, r25
 518:	62 e0       	ldi	r22, 0x02	; 2
 51a:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
		delay_us(bright_level);
 51e:	82 e3       	ldi	r24, 0x32	; 50
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

		display_number(minutes / 10, 3); //Post to digit 3
 526:	80 91 11 01 	lds	r24, 0x0111
 52a:	6a e0       	ldi	r22, 0x0A	; 10
 52c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodqi4>
 530:	63 e0       	ldi	r22, 0x03	; 3
 532:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
		delay_us(bright_level);
 536:	82 e3       	ldi	r24, 0x32	; 50
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

		display_number(minutes % 10, 4); //Post to digit 4
 53e:	80 91 11 01 	lds	r24, 0x0111
 542:	6a e0       	ldi	r22, 0x0A	; 10
 544:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodqi4>
 548:	89 2f       	mov	r24, r25
 54a:	64 e0       	ldi	r22, 0x04	; 4
 54c:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
		delay_us(bright_level);
 550:	82 e3       	ldi	r24, 0x32	; 50
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
		display_number(seconds % 10, 4); 
		delay_us(bright_level);
#endif
		
		//Flash colon for each second
		if(flip == 1) 
 558:	80 91 0d 01 	lds	r24, 0x010D
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	41 f4       	brne	.+16     	; 0x570 <__stack+0x71>
		{
			display_number(10, 5); //Post to digit COL
 560:	8a e0       	ldi	r24, 0x0A	; 10
 562:	65 e0       	ldi	r22, 0x05	; 5
 564:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
			delay_us(bright_level);
 568:	82 e3       	ldi	r24, 0x32	; 50
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
		}
		
		//Indicate wether the alarm is on or off
		if( (PINB & (1<<BUT_ALARM)) != 0)
 570:	18 9b       	sbis	0x03, 0	; 3
 572:	2c c0       	rjmp	.+88     	; 0x5cc <__stack+0xcd>
		{
			display_number(11, 4); //Turn on dot on digit 4
 574:	8b e0       	ldi	r24, 0x0B	; 11
 576:	64 e0       	ldi	r22, 0x04	; 4
 578:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
			delay_us(bright_level);
 57c:	82 e3       	ldi	r24, 0x32	; 50
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

			
			//If the alarm slide is on, and alarm_going is true, make noise!
			if(alarm_going == TRUE && flip_alarm == 1)
 584:	80 91 0c 01 	lds	r24, 0x010C
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	99 f4       	brne	.+38     	; 0x5b2 <__stack+0xb3>
 58c:	80 91 05 01 	lds	r24, 0x0105
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	79 f4       	brne	.+30     	; 0x5b2 <__stack+0xb3>

}

void clear_display(void)
{
	PORTC = 0;
 594:	18 b8       	out	0x08, r1	; 8
	PORTD &= 0b10000000;
 596:	8b b1       	in	r24, 0x0b	; 11
 598:	80 78       	andi	r24, 0x80	; 128
 59a:	8b b9       	out	0x0b, r24	; 11
			
			//If the alarm slide is on, and alarm_going is true, make noise!
			if(alarm_going == TRUE && flip_alarm == 1)
			{
				clear_display();
				siren(500);
 59c:	84 ef       	ldi	r24, 0xF4	; 244
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	0e 94 c6 01 	call	0x38c	; 0x38c <siren>
				flip_alarm = 0;
 5a4:	10 92 05 01 	sts	0x0105, r1
				shredCount ++;
 5a8:	80 91 00 01 	lds	r24, 0x0100
 5ac:	8f 5f       	subi	r24, 0xFF	; 255
 5ae:	80 93 00 01 	sts	0x0100, r24
			}
			
			if (shredCount > 5)
 5b2:	80 91 00 01 	lds	r24, 0x0100
 5b6:	86 30       	cpi	r24, 0x06	; 6
 5b8:	88 f0       	brcs	.+34     	; 0x5dc <__stack+0xdd>
			{
			
				sbi(PORTB, SHRED);
 5ba:	2a 9a       	sbi	0x05, 2	; 5
				if (shredCount == 14) {shredCount = 0; alarm_going = FALSE; cbi(PORTB, SHRED);}
 5bc:	8e 30       	cpi	r24, 0x0E	; 14
 5be:	71 f4       	brne	.+28     	; 0x5dc <__stack+0xdd>
 5c0:	10 92 00 01 	sts	0x0100, r1
 5c4:	10 92 0c 01 	sts	0x010C, r1
 5c8:	2a 98       	cbi	0x05, 2	; 5
 5ca:	08 c0       	rjmp	.+16     	; 0x5dc <__stack+0xdd>

			}
		}
		else
		{
			snooze = FALSE; //If the alarm switch is turned off, this resets the ~9 minute addtional snooze timer
 5cc:	10 92 0b 01 	sts	0x010B, r1
			
			hours_alarm_snooze = 88; //Set these values high, so that normal time cannot hit the snooze time accidentally
 5d0:	10 93 07 01 	sts	0x0107, r17
			minutes_alarm_snooze = 88;
 5d4:	10 93 06 01 	sts	0x0106, r17
			seconds_alarm_snooze = 88;
 5d8:	10 93 10 01 	sts	0x0110, r17
		}
		
		//Check whether it is AM or PM and turn on dot
		if((ampm == AM)&&(amMark>=5))
 5dc:	80 91 0f 01 	lds	r24, 0x010F
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	71 f4       	brne	.+28     	; 0x600 <__stack+0x101>
 5e4:	80 91 01 01 	lds	r24, 0x0101
 5e8:	85 30       	cpi	r24, 0x05	; 5
 5ea:	50 f0       	brcs	.+20     	; 0x600 <__stack+0x101>
		{
			amMark = 0;	// This variable is used to help dim the am/pm dot
 5ec:	10 92 01 01 	sts	0x0101, r1
			display_number(12, 6); //Turn on dot on apostrophe
 5f0:	8c e0       	ldi	r24, 0x0C	; 12
 5f2:	66 e0       	ldi	r22, 0x06	; 6
 5f4:	0e 94 de 00 	call	0x1bc	; 0x1bc <display_number>
			delay_us(bright_level);
 5f8:	82 e3       	ldi	r24, 0x32	; 50
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>

}

void clear_display(void)
{
	PORTC = 0;
 600:	18 b8       	out	0x08, r1	; 8
	PORTD &= 0b10000000;
 602:	8b b1       	in	r24, 0x0b	; 11
 604:	80 78       	andi	r24, 0x80	; 128
 606:	8b b9       	out	0x0b, r24	; 11
			display_number(12, 6); //Turn on dot on apostrophe
			delay_us(bright_level);
		}

		clear_display();
		delay_us(bright_level);
 608:	82 e3       	ldi	r24, 0x32	; 50
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 95 01 	call	0x32a	; 0x32a <delay_us>
	uint16_t bright_level = 50;
	//uint16_t bright_level = 100;
	
	//time_on /= 11; //Take the time_on and adjust it for the time it takes to run the display loop below
	
	for(uint16_t j = 0 ; j < time_on ; j++)
 610:	21 96       	adiw	r28, 0x01	; 1
 612:	ce 15       	cp	r28, r14
 614:	df 05       	cpc	r29, r15
 616:	08 f4       	brcc	.+2      	; 0x61a <__stack+0x11b>
 618:	66 cf       	rjmp	.-308    	; 0x4e6 <display_time+0x14>
		}

		clear_display();
		delay_us(bright_level);
	}
}
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	1f 91       	pop	r17
 620:	ff 90       	pop	r15
 622:	ef 90       	pop	r14
 624:	08 95       	ret

00000626 <check_buttons>:
	}
}

//Checks buttons for system settings
void check_buttons(void)
{
 626:	bf 92       	push	r11
 628:	cf 92       	push	r12
 62a:	df 92       	push	r13
 62c:	ef 92       	push	r14
 62e:	ff 92       	push	r15
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
	uint8_t sling_shot = 0;
	uint8_t minute_change = 1;
	uint8_t previous_button = 0;
	
	//If the user hits snooze while alarm is going off, record time so that we can set off alarm again in 9 minutes
	if ( (PIND & (1<<BUT_SNOOZE)) == 0 && alarm_going == TRUE)
 634:	4f 99       	sbic	0x09, 7	; 9
 636:	33 c0       	rjmp	.+102    	; 0x69e <check_buttons+0x78>
 638:	20 91 0c 01 	lds	r18, 0x010C
 63c:	21 30       	cpi	r18, 0x01	; 1
 63e:	79 f5       	brne	.+94     	; 0x69e <check_buttons+0x78>
	{
		alarm_going = FALSE; //Turn off alarm
 640:	10 92 0c 01 	sts	0x010C, r1
		snooze = TRUE; //But remember that we are in snooze mode, alarm needs to go off again in a few minutes
 644:	20 93 0b 01 	sts	0x010B, r18
		shredCount = 0;
 648:	10 92 00 01 	sts	0x0100, r1
		cbi(PORTB, SHRED);
 64c:	2a 98       	cbi	0x05, 2	; 5
		
		seconds_alarm_snooze = 0;
 64e:	10 92 10 01 	sts	0x0110, r1
		minutes_alarm_snooze = minutes + 9; //Snooze to 9 minutes from now
 652:	90 91 11 01 	lds	r25, 0x0111
 656:	89 2f       	mov	r24, r25
 658:	87 5f       	subi	r24, 0xF7	; 247
 65a:	80 93 06 01 	sts	0x0106, r24
		hours_alarm_snooze = hours;
 65e:	30 91 12 01 	lds	r19, 0x0112
 662:	30 93 07 01 	sts	0x0107, r19
		ampm_alarm_snooze = ampm;
 666:	40 91 0f 01 	lds	r20, 0x010F
 66a:	40 93 0a 01 	sts	0x010A, r20
		
		if(minutes_alarm_snooze > 59)
 66e:	8c 33       	cpi	r24, 0x3C	; 60
 670:	b0 f0       	brcs	.+44     	; 0x69e <check_buttons+0x78>
		{
			minutes_alarm_snooze -= 60;
 672:	93 53       	subi	r25, 0x33	; 51
 674:	90 93 06 01 	sts	0x0106, r25
			hours_alarm_snooze++;
 678:	83 2f       	mov	r24, r19
 67a:	8f 5f       	subi	r24, 0xFF	; 255
 67c:	80 93 07 01 	sts	0x0107, r24

			if(hours_alarm_snooze == 12)
 680:	8c 30       	cpi	r24, 0x0C	; 12
 682:	49 f4       	brne	.+18     	; 0x696 <check_buttons+0x70>
			{
				if(ampm_alarm_snooze == AM) 
 684:	41 30       	cpi	r20, 0x01	; 1
 686:	21 f4       	brne	.+8      	; 0x690 <check_buttons+0x6a>
					ampm_alarm_snooze = PM;
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	80 93 0a 01 	sts	0x010A, r24
 68e:	07 c0       	rjmp	.+14     	; 0x69e <check_buttons+0x78>
				else
					ampm_alarm_snooze = AM;
 690:	20 93 0a 01 	sts	0x010A, r18
 694:	04 c0       	rjmp	.+8      	; 0x69e <check_buttons+0x78>
			}

			if(hours_alarm_snooze == 13) hours_alarm_snooze = 1;
 696:	8d 30       	cpi	r24, 0x0D	; 13
 698:	11 f4       	brne	.+4      	; 0x69e <check_buttons+0x78>
 69a:	20 93 07 01 	sts	0x0107, r18
		}
		
	}

	//Check for set time
	if ( (PINB & ((1<<BUT_UP)|(1<<BUT_DOWN))) == 0)
 69e:	83 b1       	in	r24, 0x03	; 3
 6a0:	80 73       	andi	r24, 0x30	; 48
 6a2:	09 f0       	breq	.+2      	; 0x6a6 <check_buttons+0x80>
 6a4:	a3 c0       	rjmp	.+326    	; 0x7ec <check_buttons+0x1c6>
	{
		delay_ms(1000);
 6a6:	88 ee       	ldi	r24, 0xE8	; 232
 6a8:	93 e0       	ldi	r25, 0x03	; 3
 6aa:	0e 94 ac 01 	call	0x358	; 0x358 <delay_ms>

		if ( (PINB & ((1<<BUT_UP)|(1<<BUT_DOWN))) == 0)
 6ae:	83 b1       	in	r24, 0x03	; 3
 6b0:	80 73       	andi	r24, 0x30	; 48
 6b2:	29 f0       	breq	.+10     	; 0x6be <check_buttons+0x98>
 6b4:	9b c0       	rjmp	.+310    	; 0x7ec <check_buttons+0x1c6>
			//Set time!

			//siren(500); //Make some noise to show that you're setting the time

			while( (PINB & ((1<<BUT_UP)|(1<<BUT_DOWN))) == 0) //Wait for you to stop pressing the buttons
				display_time(1000); //Display current time for 1000ms
 6b6:	88 ee       	ldi	r24, 0xE8	; 232
 6b8:	93 e0       	ldi	r25, 0x03	; 3
 6ba:	0e 94 69 02 	call	0x4d2	; 0x4d2 <display_time>
			//You've been holding up and down for 2 seconds
			//Set time!

			//siren(500); //Make some noise to show that you're setting the time

			while( (PINB & ((1<<BUT_UP)|(1<<BUT_DOWN))) == 0) //Wait for you to stop pressing the buttons
 6be:	83 b1       	in	r24, 0x03	; 3
 6c0:	80 73       	andi	r24, 0x30	; 48
 6c2:	c9 f3       	breq	.-14     	; 0x6b6 <check_buttons+0x90>
 6c4:	ff 24       	eor	r15, r15
 6c6:	ee 24       	eor	r14, r14
 6c8:	e3 94       	inc	r14
 6ca:	10 e0       	ldi	r17, 0x00	; 0
						if(hours == 12)
						{
							if(ampm == AM) 
								ampm = PM;
							else
								ampm = AM;
 6cc:	01 e0       	ldi	r16, 0x01	; 1
						if(hours == 13) hours = 1;

						if(hours == 12)
						{
							if(ampm == AM) 
								ampm = PM;
 6ce:	a2 e0       	ldi	r26, 0x02	; 2
 6d0:	da 2e       	mov	r13, r26


					minutes -= minute_change;
					if(minutes > 60)
					{
						minutes = 59;
 6d2:	fb e3       	ldi	r31, 0x3B	; 59
 6d4:	bf 2e       	mov	r11, r31
						hours--;
						if(hours == 0) hours = 12;
 6d6:	ec e0       	ldi	r30, 0x0C	; 12
 6d8:	ce 2e       	mov	r12, r30
			while( (PINB & ((1<<BUT_UP)|(1<<BUT_DOWN))) == 0) //Wait for you to stop pressing the buttons
				display_time(1000); //Display current time for 1000ms

			while(1)
			{
				if ( (PIND & (1<<BUT_SNOOZE)) == 0) //All done!
 6da:	4f 99       	sbic	0x09, 7	; 9
 6dc:	13 c0       	rjmp	.+38     	; 0x704 <check_buttons+0xde>
 6de:	00 e0       	ldi	r16, 0x00	; 0
				{
					for(i = 0 ; i < 3 ; i++)
					{
						display_time(250); //Display current time for 100ms
 6e0:	8a ef       	ldi	r24, 0xFA	; 250
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <display_time>

}

void clear_display(void)
{
	PORTC = 0;
 6e8:	18 b8       	out	0x08, r1	; 8
	PORTD &= 0b10000000;
 6ea:	8b b1       	in	r24, 0x0b	; 11
 6ec:	80 78       	andi	r24, 0x80	; 128
 6ee:	8b b9       	out	0x0b, r24	; 11
				{
					for(i = 0 ; i < 3 ; i++)
					{
						display_time(250); //Display current time for 100ms
						clear_display();
						delay_ms(250);
 6f0:	8a ef       	ldi	r24, 0xFA	; 250
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 ac 01 	call	0x358	; 0x358 <delay_ms>

			while(1)
			{
				if ( (PIND & (1<<BUT_SNOOZE)) == 0) //All done!
				{
					for(i = 0 ; i < 3 ; i++)
 6f8:	0f 5f       	subi	r16, 0xFF	; 255
 6fa:	03 30       	cpi	r16, 0x03	; 3
 6fc:	89 f7       	brne	.-30     	; 0x6e0 <check_buttons+0xba>
						display_time(250); //Display current time for 100ms
						clear_display();
						delay_ms(250);
					}
					
					while((PIND & (1<<BUT_SNOOZE)) == 0) ; //Wait for you to release button
 6fe:	4f 9b       	sbis	0x09, 7	; 9
 700:	fe cf       	rjmp	.-4      	; 0x6fe <check_buttons+0xd8>
 702:	78 c0       	rjmp	.+240    	; 0x7f4 <check_buttons+0x1ce>
					
					break; 
				}

				if ( (PINB & (1<<BUT_UP)) == 0)
 704:	1d 99       	sbic	0x03, 5	; 3
 706:	38 c0       	rjmp	.+112    	; 0x778 <check_buttons+0x152>
				{
					//Ramp minutes faster if we are holding the button
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
					if(previous_button == BUT_UP) 
 708:	15 30       	cpi	r17, 0x05	; 5
 70a:	21 f0       	breq	.+8      	; 0x714 <check_buttons+0xee>
 70c:	ff 24       	eor	r15, r15
 70e:	ee 24       	eor	r14, r14
 710:	e3 94       	inc	r14
 712:	0d c0       	rjmp	.+26     	; 0x72e <check_buttons+0x108>
						sling_shot++;
 714:	f3 94       	inc	r15
						minute_change = 1;
					}
						
					previous_button = BUT_UP;
					
					if (sling_shot > 5)
 716:	85 e0       	ldi	r24, 0x05	; 5
 718:	8f 15       	cp	r24, r15
 71a:	48 f4       	brcc	.+18     	; 0x72e <check_buttons+0x108>
					{
						minute_change++;
 71c:	e3 94       	inc	r14
						if(minute_change > 30) minute_change = 30;
 71e:	8e e1       	ldi	r24, 0x1E	; 30
 720:	8e 15       	cp	r24, r14
 722:	20 f4       	brcc	.+8      	; 0x72c <check_buttons+0x106>
 724:	ff 24       	eor	r15, r15
 726:	7e e1       	ldi	r23, 0x1E	; 30
 728:	e7 2e       	mov	r14, r23
 72a:	01 c0       	rjmp	.+2      	; 0x72e <check_buttons+0x108>
 72c:	ff 24       	eor	r15, r15
						sling_shot = 0;
					}
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
					
					minutes += minute_change;
 72e:	80 91 11 01 	lds	r24, 0x0111
 732:	8e 0d       	add	r24, r14
 734:	80 93 11 01 	sts	0x0111, r24
					if (minutes > 59)
 738:	8c 33       	cpi	r24, 0x3C	; 60
 73a:	c8 f0       	brcs	.+50     	; 0x76e <check_buttons+0x148>
					{
						minutes -= 60;
 73c:	8c 53       	subi	r24, 0x3C	; 60
 73e:	80 93 11 01 	sts	0x0111, r24
						hours++;
 742:	80 91 12 01 	lds	r24, 0x0112
 746:	8f 5f       	subi	r24, 0xFF	; 255
 748:	80 93 12 01 	sts	0x0112, r24

						if(hours == 13) hours = 1;
 74c:	8d 30       	cpi	r24, 0x0D	; 13
 74e:	11 f4       	brne	.+4      	; 0x754 <check_buttons+0x12e>
 750:	00 93 12 01 	sts	0x0112, r16

						if(hours == 12)
 754:	80 91 12 01 	lds	r24, 0x0112
 758:	8c 30       	cpi	r24, 0x0C	; 12
 75a:	49 f4       	brne	.+18     	; 0x76e <check_buttons+0x148>
						{
							if(ampm == AM) 
 75c:	80 91 0f 01 	lds	r24, 0x010F
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	19 f4       	brne	.+6      	; 0x76a <check_buttons+0x144>
								ampm = PM;
 764:	d0 92 0f 01 	sts	0x010F, r13
 768:	02 c0       	rjmp	.+4      	; 0x76e <check_buttons+0x148>
							else
								ampm = AM;
 76a:	00 93 0f 01 	sts	0x010F, r16
						}
					}
					delay_ms(100);
 76e:	84 e6       	ldi	r24, 0x64	; 100
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 ac 01 	call	0x358	; 0x358 <delay_ms>
 776:	15 e0       	ldi	r17, 0x05	; 5
				}
				
				if ( (PINB & (1<<BUT_DOWN)) == 0)
 778:	1c 99       	sbic	0x03, 4	; 3
 77a:	af cf       	rjmp	.-162    	; 0x6da <check_buttons+0xb4>
				{
					//Ramp minutes faster if we are holding the button
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
					if(previous_button == BUT_DOWN) 
 77c:	14 30       	cpi	r17, 0x04	; 4
 77e:	21 f0       	breq	.+8      	; 0x788 <check_buttons+0x162>
 780:	ff 24       	eor	r15, r15
 782:	ee 24       	eor	r14, r14
 784:	e3 94       	inc	r14
 786:	0d c0       	rjmp	.+26     	; 0x7a2 <check_buttons+0x17c>
						sling_shot++;
 788:	f3 94       	inc	r15
						minute_change = 1;
					}
						
					previous_button = BUT_DOWN;
					
					if (sling_shot > 5)
 78a:	85 e0       	ldi	r24, 0x05	; 5
 78c:	8f 15       	cp	r24, r15
 78e:	48 f4       	brcc	.+18     	; 0x7a2 <check_buttons+0x17c>
					{
						minute_change++;
 790:	e3 94       	inc	r14
						if(minute_change > 30) minute_change = 30;
 792:	8e e1       	ldi	r24, 0x1E	; 30
 794:	8e 15       	cp	r24, r14
 796:	20 f4       	brcc	.+8      	; 0x7a0 <check_buttons+0x17a>
 798:	ff 24       	eor	r15, r15
 79a:	6e e1       	ldi	r22, 0x1E	; 30
 79c:	e6 2e       	mov	r14, r22
 79e:	01 c0       	rjmp	.+2      	; 0x7a2 <check_buttons+0x17c>
 7a0:	ff 24       	eor	r15, r15
						sling_shot = 0;
					}
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


					minutes -= minute_change;
 7a2:	80 91 11 01 	lds	r24, 0x0111
 7a6:	8e 19       	sub	r24, r14
 7a8:	80 93 11 01 	sts	0x0111, r24
					if(minutes > 60)
 7ac:	8d 33       	cpi	r24, 0x3D	; 61
 7ae:	c0 f0       	brcs	.+48     	; 0x7e0 <check_buttons+0x1ba>
					{
						minutes = 59;
 7b0:	b0 92 11 01 	sts	0x0111, r11
						hours--;
 7b4:	80 91 12 01 	lds	r24, 0x0112
 7b8:	81 50       	subi	r24, 0x01	; 1
 7ba:	80 93 12 01 	sts	0x0112, r24
						if(hours == 0) hours = 12;
 7be:	88 23       	and	r24, r24
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <check_buttons+0x1a0>
 7c2:	c0 92 12 01 	sts	0x0112, r12

						if(hours == 11)
 7c6:	80 91 12 01 	lds	r24, 0x0112
 7ca:	8b 30       	cpi	r24, 0x0B	; 11
 7cc:	49 f4       	brne	.+18     	; 0x7e0 <check_buttons+0x1ba>
						{
							if(ampm == AM) 
 7ce:	80 91 0f 01 	lds	r24, 0x010F
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	19 f4       	brne	.+6      	; 0x7dc <check_buttons+0x1b6>
								ampm = PM;
 7d6:	d0 92 0f 01 	sts	0x010F, r13
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <check_buttons+0x1ba>
							else
								ampm = AM;
 7dc:	00 93 0f 01 	sts	0x010F, r16
						}
					}
					delay_ms(100);
 7e0:	84 e6       	ldi	r24, 0x64	; 100
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 ac 01 	call	0x358	; 0x358 <delay_ms>
 7e8:	14 e0       	ldi	r17, 0x04	; 4
 7ea:	77 cf       	rjmp	.-274    	; 0x6da <check_buttons+0xb4>
 7ec:	ff 24       	eor	r15, r15
 7ee:	ee 24       	eor	r14, r14
 7f0:	e3 94       	inc	r14
 7f2:	10 e0       	ldi	r17, 0x00	; 0
		}
	}


	//Check for set alarm
	if ( (PIND & (1<<BUT_SNOOZE)) == 0)
 7f4:	4f 99       	sbic	0x09, 7	; 9
 7f6:	a8 c0       	rjmp	.+336    	; 0x948 <check_buttons+0x322>
	{
		TIMSK2 = 0;
 7f8:	10 92 70 00 	sts	0x0070, r1
		display_alarm_time(1000);
 7fc:	88 ee       	ldi	r24, 0xE8	; 232
 7fe:	93 e0       	ldi	r25, 0x03	; 3
 800:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <display_alarm_time>

		if ( (PIND & (1<<BUT_SNOOZE)) == 0)
 804:	4f 99       	sbic	0x09, 7	; 9
 806:	9d c0       	rjmp	.+314    	; 0x942 <check_buttons+0x31c>
		{
			//You've been holding snooze for 2 seconds
			//Set alarm time!

			//Disable the regular display clock interrupt
			TIMSK2 = 0;
 808:	10 92 70 00 	sts	0x0070, r1
 80c:	0c c0       	rjmp	.+24     	; 0x826 <check_buttons+0x200>

}

void clear_display(void)
{
	PORTC = 0;
 80e:	18 b8       	out	0x08, r1	; 8
	PORTD &= 0b10000000;
 810:	8b b1       	in	r24, 0x0b	; 11
 812:	80 78       	andi	r24, 0x80	; 128
 814:	8b b9       	out	0x0b, r24	; 11
			TIMSK2 = 0;

			while( (PIND & (1<<BUT_SNOOZE)) == 0) //Wait for you to stop pressing the buttons
			{
				clear_display();
				delay_ms(250);
 816:	8a ef       	ldi	r24, 0xFA	; 250
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 ac 01 	call	0x358	; 0x358 <delay_ms>

				display_alarm_time(250); //Display current time for 1000ms
 81e:	8a ef       	ldi	r24, 0xFA	; 250
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <display_alarm_time>
			//Set alarm time!

			//Disable the regular display clock interrupt
			TIMSK2 = 0;

			while( (PIND & (1<<BUT_SNOOZE)) == 0) //Wait for you to stop pressing the buttons
 826:	4f 9b       	sbis	0x09, 7	; 9
 828:	f2 cf       	rjmp	.-28     	; 0x80e <check_buttons+0x1e8>
						if(hours_alarm == 12)
						{
							if(ampm_alarm == AM) 
								ampm_alarm = PM;
							else
								ampm_alarm = AM;
 82a:	01 e0       	ldi	r16, 0x01	; 1
						if(hours_alarm == 13) hours_alarm = 1;

						if(hours_alarm == 12)
						{
							if(ampm_alarm == AM) 
								ampm_alarm = PM;
 82c:	52 e0       	ldi	r21, 0x02	; 2
 82e:	d5 2e       	mov	r13, r21
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

					minutes_alarm -= minute_change;
					if(minutes_alarm > 60)
					{
						minutes_alarm = 59;
 830:	4b e3       	ldi	r20, 0x3B	; 59
 832:	b4 2e       	mov	r11, r20
						hours_alarm--;
						if(hours_alarm == 0) hours_alarm = 12;
 834:	3c e0       	ldi	r19, 0x0C	; 12
 836:	c3 2e       	mov	r12, r19
				display_alarm_time(250); //Display current time for 1000ms
			}

			while(1)
			{
				display_alarm_time(100); //Display current time for 100ms
 838:	84 e6       	ldi	r24, 0x64	; 100
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <display_alarm_time>
				
				if ( (PIND & (1<<BUT_SNOOZE)) == 0) //All done!
 840:	4f 99       	sbic	0x09, 7	; 9
 842:	13 c0       	rjmp	.+38     	; 0x86a <check_buttons+0x244>
 844:	10 e0       	ldi	r17, 0x00	; 0
				{
					for(i = 0 ; i < 4 ; i++)
					{
						display_alarm_time(250); //Display current time for 100ms
 846:	8a ef       	ldi	r24, 0xFA	; 250
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <display_alarm_time>

}

void clear_display(void)
{
	PORTC = 0;
 84e:	18 b8       	out	0x08, r1	; 8
	PORTD &= 0b10000000;
 850:	8b b1       	in	r24, 0x0b	; 11
 852:	80 78       	andi	r24, 0x80	; 128
 854:	8b b9       	out	0x0b, r24	; 11
				{
					for(i = 0 ; i < 4 ; i++)
					{
						display_alarm_time(250); //Display current time for 100ms
						clear_display();
						delay_ms(250);
 856:	8a ef       	ldi	r24, 0xFA	; 250
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 ac 01 	call	0x358	; 0x358 <delay_ms>
			{
				display_alarm_time(100); //Display current time for 100ms
				
				if ( (PIND & (1<<BUT_SNOOZE)) == 0) //All done!
				{
					for(i = 0 ; i < 4 ; i++)
 85e:	1f 5f       	subi	r17, 0xFF	; 255
 860:	14 30       	cpi	r17, 0x04	; 4
 862:	89 f7       	brne	.-30     	; 0x846 <check_buttons+0x220>
						display_alarm_time(250); //Display current time for 100ms
						clear_display();
						delay_ms(250);
					}
					
					while((PIND & (1<<BUT_SNOOZE)) == 0) ; //Wait for you to release button
 864:	4f 9b       	sbis	0x09, 7	; 9
 866:	fe cf       	rjmp	.-4      	; 0x864 <check_buttons+0x23e>
 868:	6c c0       	rjmp	.+216    	; 0x942 <check_buttons+0x31c>
					TIMSK2 = (1<<TOIE2); //Re-enable the timer 2 interrupt
					
					break; 
				}

				if ( (PINB & (1<<BUT_UP)) == 0)
 86a:	1d 99       	sbic	0x03, 5	; 3
 86c:	34 c0       	rjmp	.+104    	; 0x8d6 <check_buttons+0x2b0>
				{
					//Ramp minutes faster if we are holding the button
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
					if(previous_button == BUT_UP) 
 86e:	15 30       	cpi	r17, 0x05	; 5
 870:	21 f0       	breq	.+8      	; 0x87a <check_buttons+0x254>
 872:	ff 24       	eor	r15, r15
 874:	ee 24       	eor	r14, r14
 876:	e3 94       	inc	r14
 878:	0d c0       	rjmp	.+26     	; 0x894 <check_buttons+0x26e>
						sling_shot++;
 87a:	f3 94       	inc	r15
						minute_change = 1;
					}
						
					previous_button = BUT_UP;
					
					if (sling_shot > 5)
 87c:	85 e0       	ldi	r24, 0x05	; 5
 87e:	8f 15       	cp	r24, r15
 880:	48 f4       	brcc	.+18     	; 0x894 <check_buttons+0x26e>
					{
						minute_change++;
 882:	e3 94       	inc	r14
						if(minute_change > 30) minute_change = 30;
 884:	8e e1       	ldi	r24, 0x1E	; 30
 886:	8e 15       	cp	r24, r14
 888:	20 f4       	brcc	.+8      	; 0x892 <check_buttons+0x26c>
 88a:	ff 24       	eor	r15, r15
 88c:	2e e1       	ldi	r18, 0x1E	; 30
 88e:	e2 2e       	mov	r14, r18
 890:	01 c0       	rjmp	.+2      	; 0x894 <check_buttons+0x26e>
 892:	ff 24       	eor	r15, r15
						sling_shot = 0;
					}
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

					minutes_alarm += minute_change;
 894:	80 91 04 01 	lds	r24, 0x0104
 898:	8e 0d       	add	r24, r14
 89a:	80 93 04 01 	sts	0x0104, r24
					if (minutes_alarm > 59)
 89e:	8c 33       	cpi	r24, 0x3C	; 60
 8a0:	c8 f0       	brcs	.+50     	; 0x8d4 <check_buttons+0x2ae>
					{
						minutes_alarm -= 60;
 8a2:	8c 53       	subi	r24, 0x3C	; 60
 8a4:	80 93 04 01 	sts	0x0104, r24
						hours_alarm++;
 8a8:	80 91 03 01 	lds	r24, 0x0103
 8ac:	8f 5f       	subi	r24, 0xFF	; 255
 8ae:	80 93 03 01 	sts	0x0103, r24
						if(hours_alarm == 13) hours_alarm = 1;
 8b2:	8d 30       	cpi	r24, 0x0D	; 13
 8b4:	11 f4       	brne	.+4      	; 0x8ba <check_buttons+0x294>
 8b6:	00 93 03 01 	sts	0x0103, r16

						if(hours_alarm == 12)
 8ba:	80 91 03 01 	lds	r24, 0x0103
 8be:	8c 30       	cpi	r24, 0x0C	; 12
 8c0:	49 f4       	brne	.+18     	; 0x8d4 <check_buttons+0x2ae>
						{
							if(ampm_alarm == AM) 
 8c2:	80 91 08 01 	lds	r24, 0x0108
 8c6:	81 30       	cpi	r24, 0x01	; 1
 8c8:	19 f4       	brne	.+6      	; 0x8d0 <check_buttons+0x2aa>
								ampm_alarm = PM;
 8ca:	d0 92 08 01 	sts	0x0108, r13
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <check_buttons+0x2ae>
							else
								ampm_alarm = AM;
 8d0:	00 93 08 01 	sts	0x0108, r16
 8d4:	15 e0       	ldi	r17, 0x05	; 5
						}
					}
					//delay_ms(100);
				}
				
				if ( (PINB & (1<<BUT_DOWN)) == 0)
 8d6:	1c 99       	sbic	0x03, 4	; 3
 8d8:	af cf       	rjmp	.-162    	; 0x838 <check_buttons+0x212>
				{
					//Ramp minutes faster if we are holding the button
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
					if(previous_button == BUT_DOWN) 
 8da:	14 30       	cpi	r17, 0x04	; 4
 8dc:	21 f0       	breq	.+8      	; 0x8e6 <check_buttons+0x2c0>
 8de:	ff 24       	eor	r15, r15
 8e0:	ee 24       	eor	r14, r14
 8e2:	e3 94       	inc	r14
 8e4:	0d c0       	rjmp	.+26     	; 0x900 <check_buttons+0x2da>
						sling_shot++;
 8e6:	f3 94       	inc	r15
						minute_change = 1;
					}
						
					previous_button = BUT_DOWN;
					
					if (sling_shot > 5)
 8e8:	85 e0       	ldi	r24, 0x05	; 5
 8ea:	8f 15       	cp	r24, r15
 8ec:	48 f4       	brcc	.+18     	; 0x900 <check_buttons+0x2da>
					{
						minute_change++;
 8ee:	e3 94       	inc	r14
						if(minute_change > 30) minute_change = 30;
 8f0:	8e e1       	ldi	r24, 0x1E	; 30
 8f2:	8e 15       	cp	r24, r14
 8f4:	20 f4       	brcc	.+8      	; 0x8fe <check_buttons+0x2d8>
 8f6:	ff 24       	eor	r15, r15
 8f8:	9e e1       	ldi	r25, 0x1E	; 30
 8fa:	e9 2e       	mov	r14, r25
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <check_buttons+0x2da>
 8fe:	ff 24       	eor	r15, r15
						sling_shot = 0;
					}
					//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

					minutes_alarm -= minute_change;
 900:	80 91 04 01 	lds	r24, 0x0104
 904:	8e 19       	sub	r24, r14
 906:	80 93 04 01 	sts	0x0104, r24
					if(minutes_alarm > 60)
 90a:	8d 33       	cpi	r24, 0x3D	; 61
 90c:	c0 f0       	brcs	.+48     	; 0x93e <check_buttons+0x318>
					{
						minutes_alarm = 59;
 90e:	b0 92 04 01 	sts	0x0104, r11
						hours_alarm--;
 912:	80 91 03 01 	lds	r24, 0x0103
 916:	81 50       	subi	r24, 0x01	; 1
 918:	80 93 03 01 	sts	0x0103, r24
						if(hours_alarm == 0) hours_alarm = 12;
 91c:	88 23       	and	r24, r24
 91e:	11 f4       	brne	.+4      	; 0x924 <check_buttons+0x2fe>
 920:	c0 92 03 01 	sts	0x0103, r12

						if(hours_alarm == 11)
 924:	80 91 03 01 	lds	r24, 0x0103
 928:	8b 30       	cpi	r24, 0x0B	; 11
 92a:	49 f4       	brne	.+18     	; 0x93e <check_buttons+0x318>
						{
							if(ampm_alarm == AM) 
 92c:	80 91 08 01 	lds	r24, 0x0108
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	19 f4       	brne	.+6      	; 0x93a <check_buttons+0x314>
								ampm_alarm = PM;
 934:	d0 92 08 01 	sts	0x0108, r13
 938:	02 c0       	rjmp	.+4      	; 0x93e <check_buttons+0x318>
							else
								ampm_alarm = AM;
 93a:	00 93 08 01 	sts	0x0108, r16
 93e:	14 e0       	ldi	r17, 0x04	; 4
 940:	7b cf       	rjmp	.-266    	; 0x838 <check_buttons+0x212>
				//clear_display(); //Blink display
				//delay_ms(100);
			}
		}
		else
			TIMSK2 = (1<<TOIE2); //Re-enable the timer 2 interrupt
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	80 93 70 00 	sts	0x0070, r24

	}

}
 948:	1f 91       	pop	r17
 94a:	0f 91       	pop	r16
 94c:	ff 90       	pop	r15
 94e:	ef 90       	pop	r14
 950:	df 90       	pop	r13
 952:	cf 90       	pop	r12
 954:	bf 90       	pop	r11
 956:	08 95       	ret

00000958 <main>:
}


int main (void)
{
	ioinit(); //Boot up defaults
 958:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ioinit>
	
	while(1)
	{
		check_buttons(); //See if we need to set the time or snooze
 95c:	0e 94 13 03 	call	0x626	; 0x626 <check_buttons>
		check_alarm(); //See if the current time is equal to the alarm time
 960:	0e 94 90 00 	call	0x120	; 0x120 <check_alarm>
 964:	fb cf       	rjmp	.-10     	; 0x95c <main+0x4>

00000966 <__vector_9>:
		}
	}
}

ISR (SIG_OVERFLOW2) 
{
 966:	1f 92       	push	r1
 968:	0f 92       	push	r0
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	0f 92       	push	r0
 96e:	11 24       	eor	r1, r1
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	4f 93       	push	r20
 976:	5f 93       	push	r21
 978:	6f 93       	push	r22
 97a:	7f 93       	push	r23
 97c:	8f 93       	push	r24
 97e:	9f 93       	push	r25
 980:	af 93       	push	r26
 982:	bf 93       	push	r27
 984:	ef 93       	push	r30
 986:	ff 93       	push	r31
	display_time(10); //Display current time for 1ms
 988:	8a e0       	ldi	r24, 0x0A	; 10
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <display_time>
}
 990:	ff 91       	pop	r31
 992:	ef 91       	pop	r30
 994:	bf 91       	pop	r27
 996:	af 91       	pop	r26
 998:	9f 91       	pop	r25
 99a:	8f 91       	pop	r24
 99c:	7f 91       	pop	r23
 99e:	6f 91       	pop	r22
 9a0:	5f 91       	pop	r21
 9a2:	4f 91       	pop	r20
 9a4:	3f 91       	pop	r19
 9a6:	2f 91       	pop	r18
 9a8:	0f 90       	pop	r0
 9aa:	0f be       	out	0x3f, r0	; 63
 9ac:	0f 90       	pop	r0
 9ae:	1f 90       	pop	r1
 9b0:	18 95       	reti

000009b2 <__udivmodqi4>:
 9b2:	99 1b       	sub	r25, r25
 9b4:	79 e0       	ldi	r23, 0x09	; 9
 9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__udivmodqi4_ep>

000009b8 <__udivmodqi4_loop>:
 9b8:	99 1f       	adc	r25, r25
 9ba:	96 17       	cp	r25, r22
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <__udivmodqi4_ep>
 9be:	96 1b       	sub	r25, r22

000009c0 <__udivmodqi4_ep>:
 9c0:	88 1f       	adc	r24, r24
 9c2:	7a 95       	dec	r23
 9c4:	c9 f7       	brne	.-14     	; 0x9b8 <__udivmodqi4_loop>
 9c6:	80 95       	com	r24
 9c8:	08 95       	ret

000009ca <_exit>:
 9ca:	f8 94       	cli

000009cc <__stop_program>:
 9cc:	ff cf       	rjmp	.-2      	; 0x9cc <__stop_program>
